FROM nvidia/cuda:11.3.1-devel-ubuntu20.04
ENV DEBIAN_FRONTEND=noninteractive
SHELL ["/bin/bash", "-c"]

# set cuda path
ENV PATH=/usr/local/cuda/bin:${PATH}
ENV LD_LIBRARY_PATH=/usr/local/cuda/lib64:${LD_LIBRARY_PATH}

# install dependencies
RUN apt-get update
RUN apt-get install -y --no-install-recommends \
    git \
    python3 \
    python3-dev \
    python3-setuptools \
    python3-pip \
    gcc \
    libtinfo-dev \
    zlib1g-dev \
    build-essential \
    libedit-dev \
    libxml2-dev \
    build-essential \
    ninja-build \
    ca-certificates\
    gnupg \
    wget

# install cmake
# add the GPG key - Kitware
RUN wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc | \
    gpg --dearmor - | tee /usr/share/keyrings/kitware-archive-keyring.gpg >/dev/null

# add Kitware repo manually
RUN echo "deb [signed-by=/usr/share/keyrings/kitware-archive-keyring.gpg] https://apt.kitware.com/ubuntu/ focal main" | \
    tee /etc/apt/sources.list.d/kitware.list >/dev/null

# install cmake from Kitware
RUN apt-get update && apt-get install -y cmake

# install llvm
RUN apt-get update && apt-get install -y --no-install-recommends \
    wget gnupg lsb-release software-properties-common && \
    wget https://apt.llvm.org/llvm-snapshot.gpg.key && \
    apt-key add llvm-snapshot.gpg.key && \
    rm llvm-snapshot.gpg.key && \
    echo "deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main" > /etc/apt/sources.list.d/llvm.list

RUN apt-get update && apt-get install -y --no-install-recommends \
    llvm-10 \
    llvm-10-dev \
    clang-10 \
    libclang-10-dev

RUN ln -s /usr/bin/llvm-config-10 /usr/bin/llvm-config

RUN llvm-config --version && llvm-config --libfiles

# set work directory
WORKDIR /workspace

# clone source code
RUN git clone https://github.com/ijgit/BayesianCodeDiffusion.git .

# Ansor build
RUN mkdir -p tvm-ansor/build && \
    cp config/config.cmake tvm-ansor/build/ && \
    cp config/compile.sh tvm-ansor/build/ && \
    cd tvm-ansor/build && \
    bash compile.sh && \
    cd -

# BayesianCodeDiffusion build
RUN mkdir -p tvm-bayesian_code_diffusion/build && \
    cp config/config.cmake tvm-bayesian_code_diffusion/build/ && \
    cp config/compile.sh tvm-bayesian_code_diffusion/build/ && \
    cd tvm-bayesian_code_diffusion/build && \
    bash compile.sh && \
    cd -

# python virtual env
RUN apt-get install -y python3-venv
RUN python3 -m venv /workspace/venv && \
    /workspace/venv/bin/pip install --upgrade pip && \
    /workspace/venv/bin/pip install -r ./config/requirements.txt

CMD ["bash", "-c", "source /workspace/venv/bin/activate && nvcc -V && echo 'Build complete.'"]